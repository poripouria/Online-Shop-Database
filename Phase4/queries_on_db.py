import pyodbc

def connect_to_database(server_name, database_name):
    connection = None
    try:
        connection = pyodbc.connect(
            f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server_name};DATABASE={database_name};Trusted_Connection=yes;'
        )
        print("Connection to SQL Server DB successful")
    except pyodbc.Error as e:
        print(f"The error '{e}' occurred")
    return connection

def execute_query(connection, query):
    cursor = connection.cursor()
    cursor.execute(query)
    result = cursor.fetchall()
    cursor.close()
    return result

if __name__ == "__main__":
    connection = connect_to_database("Poripouria\\SQLEXPRESS", "online_shop")
    
    if connection:
        # Generated by AI
        """ 
        "SELECT * FROM Products WHERE Stock < 10;",
        "SELECT DISTINCT Users.* FROM Users INNER JOIN Orders ON Users.UserID = Orders.UserID;",
        "SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalSold FROM OrderDetails INNER JOIN Products ON OrderDetails.ProductID = Products.ProductID GROUP BY Products.ProductName ORDER BY TotalSold DESC;",
        "SELECT * FROM Products WHERE DiscountID IS NOT NULL;",
        "SELECT * FROM Users WHERE Address LIKE '%Narmak%';",
        "SELECT Orders.* FROM Orders INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID GROUP BY Orders.OrderID HAVING COUNT(OrderDetails.ProductID) > 1;",
        "SELECT * FROM Products WHERE CategoryID = 1;",
        "SELECT Products.ProductName, AVG(Reviews.Rating) AS AverageRating FROM Reviews INNER JOIN Products ON Reviews.ProductID = Products.ProductID GROUP BY Products.ProductName;",
        "SELECT Users.UserID, Users.FullName, SUM(OrderDetails.Quantity * OrderDetails.Price) AS TotalSpent FROM Users INNER JOIN Orders ON Users.UserID = Orders.UserID INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID GROUP BY Users.UserID, Users.FullName ORDER BY TotalSpent DESC;",
        "SELECT * FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails);"
        """
        # Check Tables
        "SELECT * FROM Admins;",
        "SELECT * FROM Discounts;",
        "SELECT * FROM Users WHERE DiscountID IS NOT NULL;",
        "SELECT * FROM Categories;",
        "SELECT * FROM Brands;",
        "SELECT * FROM Products WHERE DiscountID IS NOT NULL AND BrandID IS NOT NULL AND CategoryID IS NOT NULL;",
        "SELECT * FROM Carriers;",
        "SELECT * FROM Shipping;",
        "SELECT * FROM Orders;",
        "SELECT * FROM OrderDetails;",
        "SELECT * FROM Cart;",
        "SELECT * FROM Reviews;"
        queries = [
            # Display Products with their Brands and Categories
            "SELECT ProductName, Price, BrandName, CategoryName FROM Products JOIN Brands ON Products.BrandID = Brands.BrandID JOIN Categories ON Products.CategoryID = Categories.CategoryID;",
            
            # Display Users with their Active Discounts
            "SELECT FullName, Code, Amount, StartDate, EndDate FROM Users JOIN Discounts ON Users.DiscountID = Discounts.DiscountID;",
            
            # Display Orders with their Status and Shipping Information
            "SELECT Date, Status, UserName, TrackingNumber, ShipDate, DeliveryDate FROM Orders JOIN Users ON Orders.UserID = Users.UserID JOIN Shipping ON Orders.ShippingID = Shipping.ShippingID;",
            
            # Display User Reviews with Product Information
            "SELECT ReviewText, Rating, ReviewDate, UserName, ProductName FROM Reviews JOIN Users ON Reviews.UserID = Users.UserID JOIN Products ON Reviews.ProductID = Products.ProductID;",
            
            # Display Products with Discounts Greater than 20%
            "SELECT ProductName, Price, Amount AS DiscountAmount, StartDate, EndDate FROM Products JOIN Discounts ON Products.DiscountID = Discounts.DiscountID WHERE Discounts.Amount > 20;",
                        
            # Display Products with the Count of Their Reviews
            "SELECT ProductName, COUNT(ReviewID) AS ReviewCount FROM Products LEFT JOIN Reviews ON Products.ProductID = Reviews.ProductID GROUP BY Products.ProductName;",            
            
            # Display Average Rating of Products
            "SELECT ProductName, AVG(Rating) AS AverageRating FROM Reviews INNER JOIN Products ON Reviews.ProductID = Products.ProductID GROUP BY Products.ProductName;",
            
            # Display Users Living in a Specific Area
            "SELECT FullName, Address FROM Users WHERE Users.Address LIKE '%Tehran%';",
            
            # Display Products That Have Not Been Ordered
            "SELECT ProductName FROM Products WHERE Products.ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails);"

        ]

        for query in queries:
            results = execute_query(connection, query)
            print(f"Results for query: {query}")
            for row in results:
                print(row)
        
        connection.close()
        print("Connection closed")
